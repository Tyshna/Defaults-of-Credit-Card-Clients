# -*- coding: utf-8 -*-
"""Defaults of Credit Card Clients

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19QPEhrY5N6u2cUGkz2ONC_CujHKvdv-l

### Dataset Information

This dataset contains information on default payments, demographic factors, credit data, history of payment, and bill statements of credit card clients in Taiwan from April 2005 to September 2005. There are 25 features in the dataset. They are as follows:

|Column Name|Description|
|-|-|
|**ID**|Identification of each credit card client|
|||
|**LIMIT_BAL**|The maximum amount or credit (in NT dollar) a client can spend in a month (includes individual and family/supplementary credit)|
|||
|**SEX**|Gender of a client where`1` denotes male client and `2` denotes a female client|
|||
|**EDUCATION**|Education qualification of a credit card holder|
||`1` denotes that a client graduated from a graduate school |
||`2` denotes that a client is a university graduate|
||`3` denotes that a client is a high school graduate|
||`4` denotes that a client graduated from some other institution|
||`5` denotes that the graduation status of a client is unknown|
|||
|**MARRIAGE**|Marital status of a client|
||`1` denotes that the client is married|
||`2` denotes that the client is single or unmarried|
||`3` covers all the other possibilities of marital status such as divorced, widowed, etc.|
|||
|**`AGE`**|Age of a client in years|
|||
|**PAY_0**|Repayment status of a client in September 2005|
||`-1` denotes the payment is not due|
||`1` denotes that the payment is delayed by one month|
||`2` denotes that the payment is delayed by two months|
||...|
||`9` denotes that the payment is delayed by nine months|
|||


The other columns regarding repayment status of a client are as follows:

`PAY_2`: Repayment status of a client in August 2005 (scale same as above)

`PAY_3`: Repayment status of a client in July 2005 (scale same as above)

`PAY_4`: Repayment status of a client in June 2005 (scale same as above)

`PAY_5`: Repayment status of a client in May 2005 (scale same as above)

`PAY_6`: Repayment status of a client in April 2005 (scale same as above)

`BILL_AMT1`: Amount of bill statement in September 2005 (NT dollar)

`BILL_AMT2`: Amount of bill statement in August 2005 (NT dollar)

`BILL_AMT3`: Amount of bill statement in July 2005 (NT dollar)

`BILL_AMT4`: Amount of bill statement in June 2005 (NT dollar)

`BILL_AMT5`: Amount of bill statement in May 2005 (NT dollar)

`BILL_AMT6`: Amount of bill statement in April 2005 (NT dollar)

`PAY_AMT1`: Amount of previous payment in September 2005 (NT dollar)

`PAY_AMT2`: Amount of previous payment in August 2005 (NT dollar)

`PAY_AMT3`: Amount of previous payment in July 2005 (NT dollar)

`PAY_AMT4`: Amount of previous payment in June 2005 (NT dollar)

`PAY_AMT5`: Amount of previous payment in May 2005 (NT dollar)

`PAY_AMT6`: Amount of previous payment in April 2005 (NT dollar)

`default.payment.next.month`: The default payment status of a client in the following month (October) where

  - `1` means `yes` the client is a defaulter i.e., they failed to make the payment due in the following month

- `0` means `no` the client is NOT a defaulter i.e., they successfully made the payment due in the following month

### Acknowledgements

The original dataset is from the UCI Machine Learning repository.

https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients
"""

# Importing the modules.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""---"""

#Loading dataset
credit_card_df = pd.read_csv('https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/uci-credit-card-fraud/UCI_Credit_Card.csv')
print(credit_card_df.head())

# Number of rows and columns using the 'shape' function.
print(credit_card_df.shape)

# Checking for the missing values
print(credit_card_df.isnull().sum())

"""### Education Qualification of Clients

The `EDUCATION` column must contain the following five different types of values:

- `1` denotes that a client graduated from a graduate school

- `2` denotes that a client is a university graduate

- `3` denotes that a client is a high school graduate

- `4` denotes that a client graduated from some other institution

- `5` denotes that the graduation status of a client is unknown

"""

# Count of each value in the 'EDUCATION'
print(credit_card_df['EDUCATION'].value_counts())

# Replacing the unwanted values in the 'EDUCATION' column
credit_card_df.loc[credit_card_df['EDUCATION'] == 0 , 'EDUCATION'] = 5
credit_card_df.loc[credit_card_df['EDUCATION'] == 6 , 'EDUCATION'] = 5
print(credit_card_df)

print(credit_card_df['EDUCATION'].value_counts())

# Percentage of each value in the 'EDUCATION'.
per_edu = credit_card_df['EDUCATION'].value_counts()* 100/credit_card_df.shape[0]
print(per_edu)

# Count plot for the 'EDUCATION'
plt.figure(figsize=(20,5))
sns.countplot(x=credit_card_df['EDUCATION'] ,data=credit_card_df)
plt.show()

"""---"""

print(credit_card_df.info())

"""#### Marital Status of Clients

The `MARRIAGE` column the contain the following three different types of values:

 - `1` denotes that a client is married

 - `2` denotes that a client is single

 - `3` denotes all other possible marital statuses such as divorced, widowed etc.
"""

# Count of each value in the 'MARRIAGE'
credit_card_df['MARRIAGE'].value_counts()

# Replacing the unwanted values ('0') in the 'MARRIAGE' column with '3'
credit_card_df.loc[credit_card_df["MARRIAGE"] == 0 , 'MARRIAGE'] =3
print(credit_card_df)

print(credit_card_df['MARRIAGE'].value_counts())

# Percentage of the values in the 'MARRIAGE' column.
per_mar = credit_card_df['MARRIAGE'].value_counts()/credit_card_df.shape[0] * 100
print(print(round(per_mar) ,2))

# Count plot for the 'MARRIAGE' column.
plt.figure(figsize=(20,5))
sns.countplot(x= credit_card_df['MARRIAGE'] ,data= credit_card_df)
print(plt.show())

# Box plot for the 'AGE'
plt.figure(figsize=(20,5))
sns.boxplot(x= credit_card_df['AGE'] , data=credit_card_df)
print(plt.show())

# Histogram for the 'AGE'
plt.figure(figsize=(20,5))
sns.distplot(credit_card_df['AGE'] , bins='sturges')
plt.grid()
print(plt.show())

# Box plot for the LIMIT_BAL column.
plt.figure(figsize=(20,5))
sns.boxplot(x=credit_card_df['LIMIT_BAL'] ,data=credit_card_df)
print(plt.show())

# Histogram for the 'LIMIT_BAL'
plt.figure(figsize=(20,5))
sns.distplot(credit_card_df['LIMIT_BAL'], bins='sturges')
plt.grid()
print(plt.show())

# Histogram (having 50 bins) for the 'LIMIT_BAL' column using 'hist()' function from the 'matplotlib.pyplot' module.
plt.figure(figsize=(20,5))
plt.hist(x=credit_card_df['LIMIT_BAL'], bins=50)
plt.xlabel('LIMIT_BAL')
plt.ylabel("count")
plt.grid()
print(plt.show())